// Code generated by go run ./gen.go; DO NOT EDIT.

// Package input contains functionality for handling the CLi input
package domain

import (
	"os"
	"strconv"
	"strings"

	"github.com/jessevdk/go-flags"
	"github.com/sethvargo/go-githubactions"

	"dburriss/impilo_gh/slices"
)

// ActionInputOpts represents schema of action.yaml for generating input for arguments
type ActionInputOpts struct {
	{{ range .Items }}
	{{if eq .OptsType "bool"}}{{ .FieldName }} {{ .OptsType }} `long:"{{ .ArgName }}" description:"{{ .Description }}"` {{ else }}{{ .FieldName }} {{ .OptsType }} `long:"{{ .ArgName }}" description:"{{ .Description }}" default:{{ .DefaultValue }} env:"{{ .EnvKey }}"` {{ end }}{{ end }}
}

// Initialize a new ActionInputOpts
func NewActionInputOpts() ActionInputOpts {
	return ActionInputOpts{
		{{ range .Items }}
		{{ .FieldName }}: {{ .DefaultValue }},{{ end }}
	}
}

// ActionInput represents values from the arguments
type ActionInput struct {
	{{ range .Items }}
	{{ .FieldName }} {{ .Type }} {{ end }}
}

// Convert ActionInputOpts to ActionInput
func (opts ActionInputOpts) AsActionInput() ActionInput {
	input := ActionInput{
		{{ range .Items }}
		{{if eq .OptsType .Type }}{{ .FieldName }}: opts.{{ .FieldName }}{{ else }}{{ .FieldName }}: string(opts.{{ .FieldName }}) {{ end }},{{ end }}
	}
	return input
}

// NewActionInput creates a new ActionInput instance from CLi args
func NewActionInput(args []string) ActionInput {
	// TODO: delete from template
	/* println("Env Inputs:")
	for _, envS := range os.Environ() {
		vs := strings.Split(envS, "=")
		k := vs[0]
		v := vs[1]
		println(k, v)		
	} */

	opts := ActionInputOpts{}
	parser := flags.NewParser(&opts, flags.HelpFlag)
	_, err := parser.ParseArgs(args)
	if err != nil {
		if !flags.WroteHelp(err) {
			panic(err)
		}
	}
	{{ range .Items }}{{if eq .OptsType "bool"}}
	if !slices.SliceContains(args, "--{{ .ArgName }}") {
		key := "{{ .ArgName }}"
		value := githubactions.GetInput(key)
		// println("INPUT {{ .ArgName }} from action is: ", value, " with length ", len(value))
		if value != "" {
			tmp,bErr := strconv.ParseBool(value)
			if bErr == nil {
				opts.{{ .FieldName }} = tmp 
			}
		}
	}{{ end }}{{ end }}

	return opts.AsActionInput()
}