// Code generated by go run ./gen.go; DO NOT EDIT.

// Package input contains functionality for handling the CLi input
package domain

import (
	"strconv"

	"github.com/jessevdk/go-flags"
	"github.com/sethvargo/go-githubactions"

	"dburriss/impilo_gh/slices"
)

// ActionInputOpts represents schema of action.yaml for generating input for arguments
type ActionInputOpts struct {
	
	ProjectName string `long:"project-name" description:"Name of the project Default: app" default:"app" env:"INPUT_PROJECT-NAME"` 
	ConfigFile flags.Filename `long:"config-file" description:"Config file. Default: impilo.yml Default: impilo.yml" default:"impilo.yml" env:"INPUT_CONFIG-FILE"` 
	IgnoreConfigFile bool `long:"ignore-config-file" description:"Ignore any config file"` 
	TargetDirectory string `long:"target-directory" description:"Directory where the project file is found" default:"" env:"INPUT_TARGET-DIRECTORY"` 
	PackageManager string `long:"package-manager" description:"Package manager eg. npm, nuget Default: npm" default:"npm" env:"INPUT_PACKAGE-MANAGER"` 
	ScanVulnerabilities bool `long:"scan-vulnerabilities" description:"Vulnerabilities should be scanned"` 
	ScanLicenses bool `long:"scan-licenses" description:"Licenses should be scanned"` 
}

// ActionInput represents values from the arguments
type ActionInput struct {
	
	ProjectName string 
	ConfigFile string 
	IgnoreConfigFile bool 
	TargetDirectory string 
	PackageManager string 
	ScanVulnerabilities bool 
	ScanLicenses bool 
}

// NewActionInput creates a new ActionInput instance from CLi args
func NewActionInput(args []string) ActionInput {
	opts := ActionInputOpts{}
	parser := flags.NewParser(&opts, flags.HelpFlag)
	_, err := parser.ParseArgs(args)
	if err != nil {
		if !flags.WroteHelp(err) {
			panic(err)
		}
	}
	
	if !slices.SliceContains(args, "--ignore-config-file") {
		key := "INPUT_IGNORE-CONFIG-FILE"
		value := githubactions.GetInput(key)
		if value != "" {
			tmp,bErr := strconv.ParseBool("true")
			if bErr != nil {
				opts.IgnoreConfigFile = tmp 
			}
		}
	}
	if !slices.SliceContains(args, "--scan-vulnerabilities") {
		key := "INPUT_SCAN-VULNERABILITIES"
		value := githubactions.GetInput(key)
		if value != "" {
			tmp,bErr := strconv.ParseBool("true")
			if bErr != nil {
				opts.ScanVulnerabilities = tmp 
			}
		}
	}
	if !slices.SliceContains(args, "--scan-licenses") {
		key := "INPUT_SCAN-LICENSES"
		value := githubactions.GetInput(key)
		if value != "" {
			tmp,bErr := strconv.ParseBool("true")
			if bErr != nil {
				opts.ScanLicenses = tmp 
			}
		}
	}

	input := ActionInput{
		
		ProjectName: opts.ProjectName,
		ConfigFile: string(opts.ConfigFile) ,
		IgnoreConfigFile: opts.IgnoreConfigFile,
		TargetDirectory: opts.TargetDirectory,
		PackageManager: opts.PackageManager,
		ScanVulnerabilities: opts.ScanVulnerabilities,
		ScanLicenses: opts.ScanLicenses,
	}
	return input
}